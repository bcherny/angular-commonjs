{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/index.js","src/add.js","src/divide.js","src/multiply.js","src/subtract.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var angular = window.angular,\n    add = require('./add'),\n    subtract = require('./subtract'),\n    multiply = require('./multiply'),\n    divide = require('./divide')\n\nangular\n.module('foo', [])\n.controller('foo', function () {})\n\n/*\n  filters\n */\n\n.filter('add', function () {\n  return add\n})\n.filter('subtract', function () {\n  return subtract\n})\n.filter('multiply', function () {\n  return multiply\n})\n.filter('divide', function () {\n  return divide\n})\n\n/*\n  helpers\n */\n\n.filter('split', function () {\n\n  return function (string) {\n    return (string || '').split(' ')\n  }\n\n})\n.filter('toNumbers', function () {\n\n  return function (array) {\n    return array.map(Number)\n  }\n\n})","// (numbers: Array<Number>) => Number\nmodule.exports = function add (numbers) {\n\n  return numbers.reduce(function (prev, cur) {\n    return prev + cur\n  })\n\n}","// (numbers: Array<Number>) => Number\nmodule.exports = function divide (numbers) {\n\n  return numbers.reduce(function (prev, cur) {\n    return prev / cur\n  })\n\n}","// (numbers: Array<Number>) => Number\nmodule.exports = function multiply (numbers) {\n\n  return numbers.reduce(function (prev, cur) {\n    return prev * cur\n  })\n\n}","// (numbers: Array<Number>) => Number\nmodule.exports = function subtract (numbers) {\n\n  return numbers.reduce(function (prev, cur) {\n    return prev - cur\n  })\n\n}"]}